<%- include('./partials/header'); %>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .img-container {
            position: relative;
            display: inline-block;
        }

        .deleteButton {
            position: absolute;
            left: 50%;
            bottom: 5px;
            transform: translateX(-50%)
        }

        .img-thumbnail {
            max-width: 200px;
            margin-right: 10px;

        }
    </style>

    <div class="container-fluid pt-4 px-4">
        <div class="bg-light rounded p-4">
            <form action="/admin/editProduct/<%=product._id%>" method="POST" enctype="multipart/form-data" id="formMain"
                class="container ">
                <h2 class="mb-4">Edit Product</h2>

                <!-- General info -->
                <div class="form-group">
                    <label for="productTitle">Product Name</label>
                    <input type="text" name="name" value='<%=product.name%>' class="form-control" id="productTitle">
                    <small id="nameError" class="form-text text-danger"></small>
                </div>

                <div class="form-group">
                    <label for="productDescription">Description</label>
                    <textarea name="discription" class="form-control" rows="4"
                        id="productDescription"><%=product.discription%></textarea>
                    <small id="descriptionError" class="form-text text-danger"></small>
                </div>

                <div class="form-group">
                    <label for="productBrand">Brand name</label>
                    <select class="form-select" name="brand" id="productBrand" value='<%=product.brand%>'>
                        <option value="<%=product.brand._id%>" selected>
                            <%=product.brand.name%>
                        </option>
                        <% if (brands.length> 0) { %>
                            <% for (let i=0; i < brands.length; i++) { %>
                                <option value="<%= brands[i]._id %>">
                                    <%= brands[i].name %>
                                </option>
                                <% } %>
                                    <% } else { %>
                                        <option value="" disabled>No Brand found Add on first</option>
                                        <% } %>
                    </select>
                    <small id="brandError" class="form-text text-danger"></small>
                </div>

                <!-- Pricing -->
                <div class="form-group">
                    <label for="productPrice">Cost </label>
                    <input type="text" name="price" value='<%=product.price%>' class="form-control" id="productPrice">
                    <small id="priceError" class="form-text text-danger"></small>
                </div>

                <!-- Color -->
                <div class="form-group">
                    <label for="productColor">Color</label>
                    <select class="form-select" name="color" id="productColor">
                        <option value="" disabled>Select Color</option>
                        <option value="Black" <%=product.color==="Black" ? "selected" : "" %>>Black</option>
                        <option value="White" <%=product.color==="White" ? "selected" : "" %>>White</option>
                        <option value="Red" <%=product.color==="Red" ? "selected" : "" %>>Red</option>
                        <option value="Orange" <%=product.color==="Orange" ? "selected" : "" %>>Orange</option>
                        <option value="Yellow" <%=product.color==="Yellow" ? "selected" : "" %>>Yellow</option>
                        <option value="Green" <%=product.color==="Green" ? "selected" : "" %>>Green</option>
                        <option value="Blue" <%=product.color==="Blue" ? "selected" : "" %>>Blue</option>
                        <option value="Purple" <%=product.color==="Purple" ? "selected" : "" %>>Purple</option>
                        <option value="Pink" <%=product.color==="Pink" ? "selected" : "" %>>Pink</option>
                        <option value="Brown" <%=product.color==="Brown" ? "selected" : "" %>>Brown</option>
                        <option value="Gray" <%=product.color==="Gray" ? "selected" : "" %>>Gray</option>
                        <option value="Silver" <%=product.color==="Silver" ? "selected" : "" %>>Silver</option>
                        <option value="Gold" <%=product.color==="Gold" ? "selected" : "" %>>Gold</option>
                    </select>
                    <small id="colorError" class="form-text text-danger"></small>
                </div>

                <!-- Quantity -->
                <div class="form-group">
                    <label for="productQuantity">Quantity</label>
                    <input type="text" name="quantity" value='<%=product.quantity%>' class="form-control"
                        id="productQuantity">
                    <small id="quantityError" class="form-text text-danger"></small>
                </div>

                <!-- Size -->
                <div class="form-group">
                    <label for="productSize">Size</label>
                    <select class="form-select" name="size" id="productSize" value='<%=product.size%>'>
                        <option value="XS" <%=product.size==="XS" ? "selected" : "" %> >XS</option>
                        <option value="S" <%=product.size==="S" ? "selected" : "" %>>Small</option>
                        <option value="M" <%=product.size==="M" ? "selected" : "" %>>Medium</option>
                        <option value="L" <%=product.size==="L" ? "selected" : "" %>>Large</option>
                        <option value="XL" <%=product.size==="XL" ? "selected" : "" %>>Extra Large</option>
                        <option value="XXL" <%=product.size==="XXL" ? "selected" : "" %> >XXL</option>
                        <!-- Add more options as needed -->
                    </select>
                    <small id="sizeError" class="form-text text-danger"></small>
                </div>

                <!-- Category -->
                <div class="form-group">
                    <label for="productCategory">Category</label>
                    <select class="form-select" name="category" id="productCategory" value='<%=product.category%>'>
                        <option value="<%=product.categary._id%>" selected>
                            <%=product.categary.name%>
                        </option>

                        <% if (category.length> 0) { %>
                            <% for (let i=0; i < category.length; i++) { %>
                                <option value="<%= category[i]._id %>">
                                    <%= category[i].name %>
                                </option>
                                <% } %>
                                    <% } else { %>
                                        <option value="" disabled>No categories found</option>
                                        <% } %>
                    </select>
                    <small id="categoryError" class="form-text text-danger"></small>
                </div>
                <!-- Media -->
                <div class="form-group">
                    <label for="productImages">Images</label>
                    <input class="form-control" type="file" accept="image/*" name="images" multiple id="productImages">
                    <div id="imagePreviewContainer" class="mt-2">
                        <%for(let i=0;i<product.images.length;i++){%>
                            <div class="img-container" id="loadedImages-<%=i%>">
                                <img src="/admin/assets/images/catagory/<%=product.images[i]%>" alt=""
                                    class="img-thumbnail">
                                <button type="button" class="btn btn-danger deleteButton"
                                    onclick="deleteImage('loadedImages-<%=i%>','<%=product.images[i]%>')"
                                    id="deleteButton">Delete</button>
                            </div>
                            <%}%>
                    </div>
                    <small id="imagesError" class="form-text text-danger">Crop all images before upload</small>
                </div>


                <!-- Submit button -->
                <button type="submit" class="btn btn-primary btn-lg btn-block mt-2">Update Product</button>
                <a href="/admin/products" class="btn btn-danger btn-lg btn-block mt-2">Cancel</a>
            </form>
        </div>
    </div>



    <script>
        const input = document.getElementById('productImages');
        const imagePreviewContainer = document.getElementById('imagePreviewContainer');
        const productId = '<%=product._id%>';

        function deleteImage(divId, imageName) {
            axios.delete('/admin/deleteImage', {
                data: { imageName, productId }
            }).then((res) => {
                console.log(res)
                if (res.status == 201) {
                    Swal.fire({
                        title: "Image Deletion Error",
                        text: res.data.message,
                        icon: "warning",
                    });
                    return
                }
                let findDiv = document.getElementById(divId)
                imagePreviewContainer.removeChild(findDiv)
            }).catch((err) => {
                console.log(err)
                alert(err.message)
            })
        }

        input.addEventListener('change', () => {


            const dataTransfer = new DataTransfer(); // Initialize DataTransfer to keep track of all cropped files

            Array.from(input.files).forEach(file => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.classList.add('img-thumbnail');

                    const cropContainer = document.createElement('div');
                    cropContainer.classList.add('crop-container');
                    cropContainer.style.position = 'relative';
                    cropContainer.style.display = 'inline-block';

                    const cropButton = document.createElement('button');
                    cropButton.type = 'button'
                    cropButton.textContent = 'Crop';
                    cropButton.id = 'CropBtn';
                    cropButton.classList.add('btn', 'btn-sm', 'btn-info', 'crop-btn');
                    cropButton.style.position = 'absolute';
                    cropButton.style.bottom = '5px';
                    cropButton.style.left = '50%';
                    cropButton.style.transform = 'translateX(-50%)';

                    const deleteButton = document.createElement('button');
                    deleteButton.type = 'button'
                    deleteButton.textContent = 'Delete';
                    deleteButton.id = 'deleteButton';
                    deleteButton.classList.add('btn', 'btn-sm', 'btn-danger', 'deleteButton');

                    cropContainer.appendChild(img);
                    cropContainer.appendChild(cropButton);
                    imagePreviewContainer.appendChild(cropContainer);

                    const cropper = new Cropper(img, {
                        aspectRatio: 235 / 345,
                        autoCropArea: 1,
                        viewMode: 1,
                        scalable: false,
                        zoomable: true,
                        movable: true,
                    });

                    cropButton.addEventListener('click', () => {
                        cropButton.innerText = 'cropped';
                        const canvas = cropper.getCroppedCanvas({
                            width: 235,
                            height: 345
                        });

                        if (canvas) {
                            canvas.toBlob(blob => {
                                const newImg = document.createElement('img');
                                newImg.src = URL.createObjectURL(blob);

                                newImg.classList.add('img-thumbnail');

                                cropContainer.innerHTML = '';
                                // let imageContainer = document.getElementsById('img-container')
                                cropContainer.appendChild(newImg);
                                cropContainer.appendChild(deleteButton);



                                // Add the cropped file to the DataTransfer object
                                const croppedFile = new File([blob], file.name, { type: 'image/jpeg', lastModified: new Date() });
                                dataTransfer.items.add(croppedFile);

                                // Update input.files with all cropped files
                                input.files = dataTransfer.files;

                                //send the new image
                                const formData = new FormData();
                                formData.append('image', croppedFile);
                                formData.append('productId', productId);
                                let ImageName;
                                axios.put('/admin/addImage', formData).then((res) => imageName = res.data.imageName);

                                deleteButton.addEventListener('click', (e) => {
                                    axios.delete('/admin/deleteImage', {
                                        data: { imageName, productId }
                                    }).then((res) => {
                                        console.log(res)
                                        if (res.status == 200) {
                                            cropContainer.innerHTML = ''; // Update DOM here to remove the cropped image container
                                            return
                                        } else {
                                            Swal.fire({
                                                title: "Image Deletion Error",
                                                text: res.data.message,
                                                icon: "warning",
                                            });
                                        }

                                    }).catch((err) => {
                                        console.log(err)
                                        alert(err.message)
                                    })

                                })

                            });
                        } else {
                            console.error('Canvas is undefined, possibly due to incorrect cropper initialization.');
                        }
                    });
                };
                reader.readAsDataURL(file);
            });
        });



    </script>




    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('formMain')
            const productPrice = document.getElementById('productPrice');
            const productQuantity = document.getElementById('productQuantity');


            // Validate if input is a number
            function validateNumberField(field, errorFieldId, fieldName) {
                const value = field.value.trim();
                const errorField = document.getElementById(errorFieldId);
                if (isNaN(value) || value === '') {
                    errorField.textContent = `${fieldName} must be a number.`;
                    return false;
                } else {
                    errorField.textContent = '';
                    return true;
                }
            }

            //validate image is cropped
            function isCropped() {
                let cropBtnList = document.querySelectorAll('#CropBtn');
                const errorField = document.getElementById('imagesError');
                let state = false;

                if (cropBtnList.length == 0) {
                    state = true;
                }
                if (state == true) {
                    errorField.innerText = 'All Cropped';
                    console.log('cropped')
                } else {
                    console.log(' not cropped')
                    errorField.innerText = 'Crop all Before Upload ';
                }
                console.log('state ', state);
                return state; // Corrected here
            }


            // Add focus validation for price
            productPrice.addEventListener('blur', function () {
                validateNumberField(productPrice, 'priceError', 'Price');
            });

            // Add focus validation for quantity
            productQuantity.addEventListener('blur', function () {
                validateNumberField(productQuantity, 'quantityError', 'Quantity');
            });




            // Final form submission validation
            form.addEventListener('submit', function (event) {
                const isPriceValid = validateNumberField(productPrice, 'priceError', 'Price');
                const isQuantityValid = validateNumberField(productQuantity, 'quantityError', 'Quantity');
                const isCroppedVar = isCropped()

                if (!isPriceValid || !isQuantityValid || !isCroppedVar) {
                    Swal.fire({
                        title: "Field Error",
                        text: 'Please Check All Fields',
                        icon: 'info',

                    });
                    event.preventDefault(); // Prevent form submission if validation fails
                }
                else {
                    form.submit()
                }
            });
        });
    </script>

    <%- include('./partials/footer'); %>
        <%- include('../user-views/partials/alertMessages'); %>