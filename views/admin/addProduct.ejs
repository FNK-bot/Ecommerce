<%- include('./partials/header'); %>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <div class="container-fluid pt-4 px-4">
        <div class="bg-light rounded p-4">
            <form action="/admin/addProduct" method="POST" enctype="multipart/form-data" id="formMain"
                class="container ">
                <h2 class="mb-4">Add New Product</h2>

                <!-- General info -->
                <div class="form-group">
                    <label for="productTitle">Product Name</label>
                    <input type="text" name="name" placeholder="Type here" class="form-control" id="productTitle"
                        required>
                    <small id="nameError" class="form-text text-danger"></small>
                </div>

                <div class="form-group">
                    <label for="productDescription">Description</label>
                    <textarea placeholder="Type here" name="discription" class="form-control" rows="4"
                        id="productDescription" required></textarea>
                    <small id="descriptionError" class="form-text text-danger"></small>
                </div>

                <div class="form-group">
                    <label for="productBrand">Brand name</label>
                    <select class="form-select" name="brand" id="productBrand" required>
                        <option value="" disabled selected>Select a Brand</option>
                        <% if (brands.length> 0) { %>
                            <% for (let i=0; i < brands.length; i++) { %>
                                <option value="<%= brands[i]._id %>">
                                    <%= brands[i].name %>
                                </option>
                                <% } %>
                                    <% } else { %>
                                        <option value="" disabled>No Brand found Add on first</option>
                                        <% } %>
                    </select>
                    <small id="brandError" class="form-text text-danger"></small>
                </div>

                <!-- Pricing -->
                <div class="form-group">
                    <label for="productPrice">Cost </label>
                    <input type="text" name="price" placeholder="â‚¹00.0" class="form-control" id="productPrice" required>
                    <small id="priceError" class="form-text text-danger"></small>
                </div>

                <!-- Color -->
                <div class="form-group">
                    <label for="productColor">Color</label>
                    <select class="form-select" name="color" id="productColor" required>
                        <option value="" disabled selected>Select Color</option>
                        <option value="Black">Black</option>
                        <option value="White">White</option>
                        <option value="Red">Red</option>
                        <option value="Orange">Orange</option>
                        <option value="Yellow">Yellow</option>
                        <option value="Green">Green</option>
                        <option value="Blue">Blue</option>
                        <option value="Purple">Purple</option>
                        <option value="Pink">Pink</option>
                        <option value="Brown">Brown</option>
                        <option value="Gray">Gray</option>
                        <option value="Silver">Silver</option>
                        <option value="Gold">Gold</option>
                        <!-- Add more options as needed -->
                    </select>
                    <small id="colorError" class="form-text text-danger"></small>
                </div>

                <!-- Quantity -->
                <div class="form-group">
                    <label for="productQuantity">Quantity</label>
                    <input type="text" name="quantity" placeholder="0" class="form-control" id="productQuantity"
                        required>
                    <small id="quantityError" class="form-text text-danger"></small>
                </div>

                <!-- Size -->
                <div class="form-group">
                    <label for="productSize">Size</label>
                    <select class="form-select" name="size" id="productSize" required>
                        <option value="" disabled selected>Select Size</option>
                        <option value="xs">XS</option>
                        <option value="s">S</option>
                        <option value="m">M</option>
                        <option value="l">L</option>
                        <option value="xl">XL</option>
                        <option value="xxl">XXL</option>
                        <!-- Add more options as needed -->
                    </select>
                    <small id="sizeError" class="form-text text-danger"></small>
                </div>

                <!-- Category -->
                <div class="form-group">
                    <label for="productCategory">Category</label>
                    <select class="form-select" name="category" id="productCategory" required>
                        <option value="" disabled selected>Select Category</option>
                        <% if (category.length> 0) { %>
                            <% for (let i=0; i < category.length; i++) { %>
                                <option value="<%= category[i]._id %>">
                                    <%= category[i].name %>
                                </option>
                                <% } %>
                                    <% } else { %>
                                        <option value="" disabled>No categories found</option>
                                        <% } %>
                    </select>
                    <small id="categoryError" class="form-text text-danger"></small>
                </div>

                <!-- Media -->
                <div class="form-group">
                    <label for="productImages">Images</label>
                    <small id="imagesError" class="form-text text-danger">Crop all images before upload</small>
                </div>
                <div class="input-box-container row">
                    <div class="inputBox text-center col-6"
                        style="height: 345px;width: 230px;background-color:aliceblue;" id="inputBox">
                        <img src="/images/uploadImage.png" alt="" srcset="" id="boxImage"
                            style="object-fit: fill;height: 300px;width: 200px">
                    </div>
                    <div class="inputBox text-center col-6"
                        style="height: 345px;width: 230px;background-color:aliceblue;" id="inputBox2">
                        <img src="/images/uploadImage.png" alt="" srcset="" id="boxImage"
                            style="object-fit: fill;height: 300px;width: 200px">
                    </div>
                    <input type="file" class="inputImage1" name="images" id="inputImage1" accept="image/*" hidden>
                    <input type="file" class="inputImage1" name="images" id="inputImage2" accept="image/*" hidden>
                </div>

                <!-- Submit button -->
                <button type="submit" class="btn btn-primary btn-lg btn-block mt-2">Add Product</button>
                <a href="/admin/products" class="btn btn-danger btn-lg btn-block mt-2">Cancel</a>
            </form>
        </div>
    </div>



    <script>
        let inputBox2 = document.getElementById('inputBox2');
        let imageInput2 = document.getElementById('inputImage2');
        // let inputBoxText2 = document.getElementById('inputBox-text');
        let dataTransfer2 = new DataTransfer();

        inputBox2.addEventListener('click', () => {
            if (!imageInput2.files.length > 0) {
                imageInput2.click();
            }
        });

        imageInput2.addEventListener('change', (event) => {
            let file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.style.maxWidth = '200px';
                    img.style.marginRight = '10px';
                    img.classList.add('img-thumbnail');

                    const cropContainer = document.createElement('div');
                    cropContainer.classList.add('crop-container');
                    cropContainer.style.position = 'relative';
                    cropContainer.style.display = 'inline-block';

                    const cropButton = document.createElement('button');
                    cropButton.type = 'button';
                    cropButton.textContent = 'Crop';
                    cropButton.id = 'CropBtn';
                    cropButton.classList.add('btn', 'btn-sm', 'btn-info', 'crop-btn');
                    cropButton.style.position = 'absolute';
                    cropButton.style.bottom = '5px';
                    cropButton.style.left = '50%';
                    cropButton.style.transform = 'translateX(-50%)';

                    cropContainer.appendChild(img);
                    cropContainer.appendChild(cropButton);
                    inputBox2.innerHTML = '';  // Clear previous content
                    inputBox2.appendChild(cropContainer);

                    const cropper = new Cropper(img, {
                        aspectRatio: 235 / 345,
                        autoCropArea: 1,
                        viewMode: 1,
                        scalable: false,
                        zoomable: false,
                        movable: false,
                    });

                    cropButton.addEventListener('click', () => {
                        cropButton.innerText = 'Cropped';
                        const canvas = cropper.getCroppedCanvas({
                            width: 235,
                            height: 345
                        });

                        if (canvas) {
                            canvas.toBlob(blob => {
                                const newImg = document.createElement('img');
                                newImg.src = URL.createObjectURL(blob);
                                newImg.classList.add('img-thumbnail');
                                newImg.style.maxWidth = '200px';
                                cropContainer.innerHTML = ''; // Clear previous content

                                inputBox2.appendChild(newImg);

                                // Create and append the delete button
                                const deleteButton = document.createElement('button');
                                deleteButton.type = 'button';
                                deleteButton.textContent = 'Delete Image';
                                deleteButton.classList.add('btn', 'btn-sm', 'btn-danger');

                                deleteButton.style.zIndex = 1;
                                inputBox2.appendChild(deleteButton);



                                // Add the cropped file to the DataTransfer object
                                const croppedFile = new File([blob], file.name, { type: 'image/jpeg', lastModified: new Date() });
                                dataTransfer2.items.add(croppedFile);

                                // Update input.files with the cropped file
                                imageInput2.files = dataTransfer2.files;

                                // Event listener for the delete button
                                deleteButton.addEventListener('click', (e) => {
                                    inputBox2.innerHTML = `<img src="/images/uploadImage.png" alt="" srcset="" id="boxImage"
                        style="object-fit: fill;height: 300px;width: 200px">`;
                                    imageInput2.value = '';  // Clear file input
                                    dataTransfer2 = new DataTransfer();  // Reset the DataTransfer object
                                    e.stopPropagation()
                                });
                            });
                        } else {
                            console.error('Canvas is undefined, possibly due to incorrect cropper initialization.');
                        }
                    });
                };
                reader.readAsDataURL(file);
            }
        });
    </script>

    <script>
        let inputBox = document.getElementById('inputBox');
        let imageInput1 = document.getElementById('inputImage1');
        let inputBoxText = document.getElementById('inputBox-text');
        let dataTransfer = new DataTransfer();

        inputBox.addEventListener('click', () => {
            if (!imageInput1.files.length > 0) {
                imageInput1.click();
            }
        });

        imageInput1.addEventListener('change', (event) => {
            let file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.style.maxWidth = '200px';
                    img.style.marginRight = '10px';
                    img.classList.add('img-thumbnail');

                    const cropContainer = document.createElement('div');
                    cropContainer.classList.add('crop-container');
                    cropContainer.style.position = 'relative';
                    cropContainer.style.display = 'inline-block';

                    const cropButton = document.createElement('button');
                    cropButton.type = 'button';
                    cropButton.textContent = 'Crop';
                    cropButton.id = 'CropBtn';
                    cropButton.classList.add('btn', 'btn-sm', 'btn-info', 'crop-btn');
                    cropButton.style.position = 'absolute';
                    cropButton.style.bottom = '5px';
                    cropButton.style.left = '50%';
                    cropButton.style.transform = 'translateX(-50%)';

                    cropContainer.appendChild(img);
                    cropContainer.appendChild(cropButton);
                    inputBox.innerHTML = '';  // Clear previous content
                    inputBox.appendChild(cropContainer);

                    const cropper = new Cropper(img, {
                        aspectRatio: 235 / 345,
                        autoCropArea: 1,
                        viewMode: 1,
                        scalable: false,
                        zoomable: false,
                        movable: false,
                    });

                    cropButton.addEventListener('click', () => {
                        cropButton.innerText = 'Cropped';
                        const canvas = cropper.getCroppedCanvas({
                            width: 235,
                            height: 345
                        });

                        if (canvas) {
                            canvas.toBlob(blob => {
                                const newImg = document.createElement('img');
                                newImg.src = URL.createObjectURL(blob);
                                newImg.classList.add('img-thumbnail');
                                newImg.style.maxWidth = '200px';
                                cropContainer.innerHTML = ''; // Clear previous content

                                inputBox.appendChild(newImg);

                                // Create and append the delete button
                                const deleteButton = document.createElement('button');
                                deleteButton.type = 'button';
                                deleteButton.textContent = 'Delete Image';
                                deleteButton.classList.add('btn', 'btn-sm', 'btn-danger');

                                deleteButton.style.zIndex = 1;
                                inputBox.appendChild(deleteButton);



                                // Add the cropped file to the DataTransfer object
                                const croppedFile = new File([blob], file.name, { type: 'image/jpeg', lastModified: new Date() });
                                dataTransfer.items.add(croppedFile);

                                // Update input.files with the cropped file
                                imageInput1.files = dataTransfer.files;

                                // Event listener for the delete button
                                deleteButton.addEventListener('click', (e) => {
                                    inputBox.innerHTML = `<img src="/images/uploadImage.png" alt="" srcset="" id="boxImage"
                        style="object-fit: fill;height: 300px;width: 200px">`;
                                    imageInput1.value = '';  // Clear file input
                                    dataTransfer = new DataTransfer();  // Reset the DataTransfer object
                                    e.stopPropagation()
                                });
                            });
                        } else {
                            console.error('Canvas is undefined, possibly due to incorrect cropper initialization.');
                        }
                    });
                };
                reader.readAsDataURL(file);
            }
        });
    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('formMain')
            const productPrice = document.getElementById('productPrice');
            const productQuantity = document.getElementById('productQuantity');
            const input = document.getElementById('productImages');
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');

            // Validate if input is a number
            function validateNumberField(field, errorFieldId, fieldName) {
                const value = field.value.trim();
                const errorField = document.getElementById(errorFieldId);
                if (isNaN(value) || value === '') {
                    errorField.textContent = `${fieldName} must be a number.`;
                    return false;
                } else {
                    errorField.textContent = '';
                    return true;
                }
            }

            //validate image is cropped
            function isCropped() {
                let cropBtnList = document.querySelectorAll('#CropBtn');
                const errorField = document.getElementById('imagesError');
                let state = false;

                if (cropBtnList.length == 0) {
                    state = true;
                }
                if (state == true) {
                    errorField.innerText = 'All Cropped';
                    console.log('cropped')
                } else {
                    console.log(' not cropped')
                    errorField.innerText = 'Crop all Before Upload ';
                }
                console.log('state ', state);
                return state; // Corrected here
            }


            function areImagesUploaded() {
                const errorField = document.getElementById('imagesError');
                if (!imageInput1.files.length || !imageInput2.files.length) {
                    errorField.textContent = "Please upload two images Its Needed.";
                    return false;
                }

                return true;
            }


            // Add focus validation for price
            productPrice.addEventListener('blur', function () {
                validateNumberField(productPrice, 'priceError', 'Price');
            });

            // Add focus validation for quantity
            productQuantity.addEventListener('blur', function () {
                validateNumberField(productQuantity, 'quantityError', 'Quantity');
            });




            // Final form submission validation
            form.addEventListener('submit', function (event) {
                const isPriceValid = validateNumberField(productPrice, 'priceError', 'Price');
                const isQuantityValid = validateNumberField(productQuantity, 'quantityError', 'Quantity');
                const isCroppedVar = isCropped()
                const areImagesUploadedVar = areImagesUploaded()

                if (!isPriceValid || !isQuantityValid || !isCroppedVar || !areImagesUploadedVar) {
                    Swal.fire({
                        title: "Field Error",
                        text: 'Please Check All Fields',
                        icon: 'info',

                    });
                    event.preventDefault(); // Prevent form submission if validation fails
                }
                else {
                    form.submit()
                }
            });
        });
    </script>
    <%- include('./partials/footer'); %>
        <%- include('../user-views/partials/alertMessages'); %>